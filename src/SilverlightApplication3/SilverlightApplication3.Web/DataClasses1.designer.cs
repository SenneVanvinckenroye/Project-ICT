#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SilverlightApplication3.Web
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="medplanner-2013-3-15-11-53")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBranch(Branch instance);
    partial void UpdateBranch(Branch instance);
    partial void DeleteBranch(Branch instance);
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertNursePerPatient(NursePerPatient instance);
    partial void UpdateNursePerPatient(NursePerPatient instance);
    partial void DeleteNursePerPatient(NursePerPatient instance);
    partial void InsertNurse(Nurse instance);
    partial void UpdateNurse(Nurse instance);
    partial void DeleteNurse(Nurse instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertPrescription(Prescription instance);
    partial void UpdatePrescription(Prescription instance);
    partial void DeletePrescription(Prescription instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["medplannerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Branch> Branches
		{
			get
			{
				return this.GetTable<Branch>();
			}
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<NursePerPatient> NursePerPatients
		{
			get
			{
				return this.GetTable<NursePerPatient>();
			}
		}
		
		public System.Data.Linq.Table<Nurse> Nurses
		{
			get
			{
				return this.GetTable<Nurse>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Prescription> Prescriptions
		{
			get
			{
				return this.GetTable<Prescription>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Branches")]
	public partial class Branch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BranchID;
		
		private string _BranchName;
		
		private int _AdminID;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBranchIDChanging(int value);
    partial void OnBranchIDChanged();
    partial void OnBranchNameChanging(string value);
    partial void OnBranchNameChanged();
    partial void OnAdminIDChanging(int value);
    partial void OnAdminIDChanged();
    #endregion
		
		public Branch()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BranchID
		{
			get
			{
				return this._BranchID;
			}
			set
			{
				if ((this._BranchID != value))
				{
					this.OnBranchIDChanging(value);
					this.SendPropertyChanging();
					this._BranchID = value;
					this.SendPropertyChanged("BranchID");
					this.OnBranchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BranchName
		{
			get
			{
				return this._BranchName;
			}
			set
			{
				if ((this._BranchName != value))
				{
					this.OnBranchNameChanging(value);
					this.SendPropertyChanging();
					this._BranchName = value;
					this.SendPropertyChanged("BranchName");
					this.OnBranchNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", DbType="Int NOT NULL")]
		public int AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdminIDChanging(value);
					this.SendPropertyChanging();
					this._AdminID = value;
					this.SendPropertyChanged("AdminID");
					this.OnAdminIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Branch", Storage="_User", ThisKey="AdminID", OtherKey="MemberID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Branches.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Branches.Add(this);
						this._AdminID = value.MemberID;
					}
					else
					{
						this._AdminID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctors")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocID;
		
		private int _MemberID;
		
		private string _Speciality;
		
		private EntitySet<Patient> _Patients;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocIDChanging(int value);
    partial void OnDocIDChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnSpecialityChanging(string value);
    partial void OnSpecialityChanged();
    #endregion
		
		public Doctor()
		{
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Speciality", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Speciality
		{
			get
			{
				return this._Speciality;
			}
			set
			{
				if ((this._Speciality != value))
				{
					this.OnSpecialityChanging(value);
					this.SendPropertyChanging();
					this._Speciality = value;
					this.SendPropertyChanged("Speciality");
					this.OnSpecialityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Patient", Storage="_Patients", ThisKey="DocID", OtherKey="DocID")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Doctor", Storage="_User", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Doctors.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Doctors.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NursePerPatient")]
	public partial class NursePerPatient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientID;
		
		private int _NurseID;
		
		private EntityRef<Nurse> _Nurse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnNurseIDChanging(int value);
    partial void OnNurseIDChanged();
    #endregion
		
		public NursePerPatient()
		{
			this._Nurse = default(EntityRef<Nurse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NurseID", DbType="Int NOT NULL")]
		public int NurseID
		{
			get
			{
				return this._NurseID;
			}
			set
			{
				if ((this._NurseID != value))
				{
					if (this._Nurse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNurseIDChanging(value);
					this.SendPropertyChanging();
					this._NurseID = value;
					this.SendPropertyChanged("NurseID");
					this.OnNurseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_NursePerPatient", Storage="_Nurse", ThisKey="NurseID", OtherKey="NurseID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Nurse Nurse
		{
			get
			{
				return this._Nurse.Entity;
			}
			set
			{
				Nurse previousValue = this._Nurse.Entity;
				if (((previousValue != value) 
							|| (this._Nurse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nurse.Entity = null;
						previousValue.NursePerPatients.Remove(this);
					}
					this._Nurse.Entity = value;
					if ((value != null))
					{
						value.NursePerPatients.Add(this);
						this._NurseID = value.NurseID;
					}
					else
					{
						this._NurseID = default(int);
					}
					this.SendPropertyChanged("Nurse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nurses")]
	public partial class Nurse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NurseID;
		
		private int _MemberID;
		
		private EntitySet<NursePerPatient> _NursePerPatients;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNurseIDChanging(int value);
    partial void OnNurseIDChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    #endregion
		
		public Nurse()
		{
			this._NursePerPatients = new EntitySet<NursePerPatient>(new Action<NursePerPatient>(this.attach_NursePerPatients), new Action<NursePerPatient>(this.detach_NursePerPatients));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NurseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NurseID
		{
			get
			{
				return this._NurseID;
			}
			set
			{
				if ((this._NurseID != value))
				{
					this.OnNurseIDChanging(value);
					this.SendPropertyChanging();
					this._NurseID = value;
					this.SendPropertyChanged("NurseID");
					this.OnNurseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_NursePerPatient", Storage="_NursePerPatients", ThisKey="NurseID", OtherKey="NurseID")]
		public EntitySet<NursePerPatient> NursePerPatients
		{
			get
			{
				return this._NursePerPatients;
			}
			set
			{
				this._NursePerPatients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Nurse", Storage="_User", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Nurses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Nurses.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NursePerPatients(NursePerPatient entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = this;
		}
		
		private void detach_NursePerPatients(NursePerPatient entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patients")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientID;
		
		private int _MemberID;
		
		private int _DocID;
		
		private EntitySet<Prescription> _Prescriptions;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnDocIDChanging(int value);
    partial void OnDocIDChanged();
    #endregion
		
		public Patient()
		{
			this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
			this._Doctor = default(EntityRef<Doctor>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int NOT NULL")]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", DbType="Int NOT NULL")]
		public int DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Prescription", Storage="_Prescriptions", ThisKey="PatientID", OtherKey="PatientID")]
		public EntitySet<Prescription> Prescriptions
		{
			get
			{
				return this._Prescriptions;
			}
			set
			{
				this._Prescriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Patient", Storage="_Doctor", ThisKey="DocID", OtherKey="DocID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._DocID = value.DocID;
					}
					else
					{
						this._DocID = default(int);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Patient", Storage="_User", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberID;
		
		private string _FName;
		
		private string _LName;
		
		private string _pass_hash;
		
		private char _sex;
		
		private string _email;
		
		private System.DateTime _bday;
		
		private System.Nullable<int> _ssn;
		
		private System.Nullable<char> _UserType;
		
		private EntitySet<Branch> _Branches;
		
		private EntitySet<Doctor> _Doctors;
		
		private EntitySet<Nurse> _Nurses;
		
		private EntitySet<Patient> _Patients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnFNameChanging(string value);
    partial void OnFNameChanged();
    partial void OnLNameChanging(string value);
    partial void OnLNameChanged();
    partial void Onpass_hashChanging(string value);
    partial void Onpass_hashChanged();
    partial void OnsexChanging(char value);
    partial void OnsexChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnbdayChanging(System.DateTime value);
    partial void OnbdayChanged();
    partial void OnssnChanging(System.Nullable<int> value);
    partial void OnssnChanged();
    partial void OnUserTypeChanging(System.Nullable<char> value);
    partial void OnUserTypeChanged();
    #endregion
		
		public User()
		{
			this._Branches = new EntitySet<Branch>(new Action<Branch>(this.attach_Branches), new Action<Branch>(this.detach_Branches));
			this._Doctors = new EntitySet<Doctor>(new Action<Doctor>(this.attach_Doctors), new Action<Doctor>(this.detach_Doctors));
			this._Nurses = new EntitySet<Nurse>(new Action<Nurse>(this.attach_Nurses), new Action<Nurse>(this.detach_Nurses));
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string FName
		{
			get
			{
				return this._FName;
			}
			set
			{
				if ((this._FName != value))
				{
					this.OnFNameChanging(value);
					this.SendPropertyChanging();
					this._FName = value;
					this.SendPropertyChanged("FName");
					this.OnFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string LName
		{
			get
			{
				return this._LName;
			}
			set
			{
				if ((this._LName != value))
				{
					this.OnLNameChanging(value);
					this.SendPropertyChanging();
					this._LName = value;
					this.SendPropertyChanged("LName");
					this.OnLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pass_hash", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string pass_hash
		{
			get
			{
				return this._pass_hash;
			}
			set
			{
				if ((this._pass_hash != value))
				{
					this.Onpass_hashChanging(value);
					this.SendPropertyChanging();
					this._pass_hash = value;
					this.SendPropertyChanged("pass_hash");
					this.Onpass_hashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sex", DbType="Char(1) NOT NULL")]
		public char sex
		{
			get
			{
				return this._sex;
			}
			set
			{
				if ((this._sex != value))
				{
					this.OnsexChanging(value);
					this.SendPropertyChanging();
					this._sex = value;
					this.SendPropertyChanged("sex");
					this.OnsexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bday", DbType="Date NOT NULL")]
		public System.DateTime bday
		{
			get
			{
				return this._bday;
			}
			set
			{
				if ((this._bday != value))
				{
					this.OnbdayChanging(value);
					this.SendPropertyChanging();
					this._bday = value;
					this.SendPropertyChanged("bday");
					this.OnbdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ssn", DbType="Int")]
		public System.Nullable<int> ssn
		{
			get
			{
				return this._ssn;
			}
			set
			{
				if ((this._ssn != value))
				{
					this.OnssnChanging(value);
					this.SendPropertyChanging();
					this._ssn = value;
					this.SendPropertyChanged("ssn");
					this.OnssnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="Char(1)")]
		public System.Nullable<char> UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Branch", Storage="_Branches", ThisKey="MemberID", OtherKey="AdminID")]
		public EntitySet<Branch> Branches
		{
			get
			{
				return this._Branches;
			}
			set
			{
				this._Branches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Doctor", Storage="_Doctors", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<Doctor> Doctors
		{
			get
			{
				return this._Doctors;
			}
			set
			{
				this._Doctors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Nurse", Storage="_Nurses", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<Nurse> Nurses
		{
			get
			{
				return this._Nurses;
			}
			set
			{
				this._Nurses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Patient", Storage="_Patients", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Branches(Branch entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Branches(Branch entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Nurses(Nurse entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Nurses(Nurse entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prescriptions")]
	public partial class Prescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrescriptionID;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private string _Type;
		
		private int _Quantity;
		
		private string _DrugName;
		
		private string _DDescription;
		
		private string _Course;
		
		private int _PatientID;
		
		private System.TimeSpan _Time1;
		
		private char _Taken1;
		
		private System.Nullable<System.TimeSpan> _Time2;
		
		private System.Nullable<char> _Taken2;
		
		private System.Nullable<System.TimeSpan> _Time3;
		
		private System.Nullable<char> _Taken3;
		
		private System.Nullable<System.TimeSpan> _Time4;
		
		private System.Nullable<char> _Taken4;
		
		private System.Nullable<System.TimeSpan> _Time5;
		
		private System.Nullable<char> _Taken5;
		
		private System.Nullable<System.TimeSpan> _Time6;
		
		private System.Nullable<char> _Taken6;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrescriptionIDChanging(int value);
    partial void OnPrescriptionIDChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnDrugNameChanging(string value);
    partial void OnDrugNameChanged();
    partial void OnDDescriptionChanging(string value);
    partial void OnDDescriptionChanged();
    partial void OnCourseChanging(string value);
    partial void OnCourseChanged();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnTime1Changing(System.TimeSpan value);
    partial void OnTime1Changed();
    partial void OnTaken1Changing(char value);
    partial void OnTaken1Changed();
    partial void OnTime2Changing(System.Nullable<System.TimeSpan> value);
    partial void OnTime2Changed();
    partial void OnTaken2Changing(System.Nullable<char> value);
    partial void OnTaken2Changed();
    partial void OnTime3Changing(System.Nullable<System.TimeSpan> value);
    partial void OnTime3Changed();
    partial void OnTaken3Changing(System.Nullable<char> value);
    partial void OnTaken3Changed();
    partial void OnTime4Changing(System.Nullable<System.TimeSpan> value);
    partial void OnTime4Changed();
    partial void OnTaken4Changing(System.Nullable<char> value);
    partial void OnTaken4Changed();
    partial void OnTime5Changing(System.Nullable<System.TimeSpan> value);
    partial void OnTime5Changed();
    partial void OnTaken5Changing(System.Nullable<char> value);
    partial void OnTaken5Changed();
    partial void OnTime6Changing(System.Nullable<System.TimeSpan> value);
    partial void OnTime6Changed();
    partial void OnTaken6Changing(System.Nullable<char> value);
    partial void OnTaken6Changed();
    #endregion
		
		public Prescription()
		{
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PrescriptionID
		{
			get
			{
				return this._PrescriptionID;
			}
			set
			{
				if ((this._PrescriptionID != value))
				{
					this.OnPrescriptionIDChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionID = value;
					this.SendPropertyChanged("PrescriptionID");
					this.OnPrescriptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DrugName
		{
			get
			{
				return this._DrugName;
			}
			set
			{
				if ((this._DrugName != value))
				{
					this.OnDrugNameChanging(value);
					this.SendPropertyChanging();
					this._DrugName = value;
					this.SendPropertyChanged("DrugName");
					this.OnDrugNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DDescription", DbType="VarChar(250)")]
		public string DDescription
		{
			get
			{
				return this._DDescription;
			}
			set
			{
				if ((this._DDescription != value))
				{
					this.OnDDescriptionChanging(value);
					this.SendPropertyChanging();
					this._DDescription = value;
					this.SendPropertyChanged("DDescription");
					this.OnDDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Course
		{
			get
			{
				return this._Course;
			}
			set
			{
				if ((this._Course != value))
				{
					this.OnCourseChanging(value);
					this.SendPropertyChanging();
					this._Course = value;
					this.SendPropertyChanged("Course");
					this.OnCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int NOT NULL")]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time1", DbType="Time NOT NULL")]
		public System.TimeSpan Time1
		{
			get
			{
				return this._Time1;
			}
			set
			{
				if ((this._Time1 != value))
				{
					this.OnTime1Changing(value);
					this.SendPropertyChanging();
					this._Time1 = value;
					this.SendPropertyChanged("Time1");
					this.OnTime1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taken1", DbType="Char(1) NOT NULL")]
		public char Taken1
		{
			get
			{
				return this._Taken1;
			}
			set
			{
				if ((this._Taken1 != value))
				{
					this.OnTaken1Changing(value);
					this.SendPropertyChanging();
					this._Taken1 = value;
					this.SendPropertyChanged("Taken1");
					this.OnTaken1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time2", DbType="Time")]
		public System.Nullable<System.TimeSpan> Time2
		{
			get
			{
				return this._Time2;
			}
			set
			{
				if ((this._Time2 != value))
				{
					this.OnTime2Changing(value);
					this.SendPropertyChanging();
					this._Time2 = value;
					this.SendPropertyChanged("Time2");
					this.OnTime2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taken2", DbType="Char(1)")]
		public System.Nullable<char> Taken2
		{
			get
			{
				return this._Taken2;
			}
			set
			{
				if ((this._Taken2 != value))
				{
					this.OnTaken2Changing(value);
					this.SendPropertyChanging();
					this._Taken2 = value;
					this.SendPropertyChanged("Taken2");
					this.OnTaken2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time3", DbType="Time")]
		public System.Nullable<System.TimeSpan> Time3
		{
			get
			{
				return this._Time3;
			}
			set
			{
				if ((this._Time3 != value))
				{
					this.OnTime3Changing(value);
					this.SendPropertyChanging();
					this._Time3 = value;
					this.SendPropertyChanged("Time3");
					this.OnTime3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taken3", DbType="Char(1)")]
		public System.Nullable<char> Taken3
		{
			get
			{
				return this._Taken3;
			}
			set
			{
				if ((this._Taken3 != value))
				{
					this.OnTaken3Changing(value);
					this.SendPropertyChanging();
					this._Taken3 = value;
					this.SendPropertyChanged("Taken3");
					this.OnTaken3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time4", DbType="Time")]
		public System.Nullable<System.TimeSpan> Time4
		{
			get
			{
				return this._Time4;
			}
			set
			{
				if ((this._Time4 != value))
				{
					this.OnTime4Changing(value);
					this.SendPropertyChanging();
					this._Time4 = value;
					this.SendPropertyChanged("Time4");
					this.OnTime4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taken4", DbType="Char(1)")]
		public System.Nullable<char> Taken4
		{
			get
			{
				return this._Taken4;
			}
			set
			{
				if ((this._Taken4 != value))
				{
					this.OnTaken4Changing(value);
					this.SendPropertyChanging();
					this._Taken4 = value;
					this.SendPropertyChanged("Taken4");
					this.OnTaken4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time5", DbType="Time")]
		public System.Nullable<System.TimeSpan> Time5
		{
			get
			{
				return this._Time5;
			}
			set
			{
				if ((this._Time5 != value))
				{
					this.OnTime5Changing(value);
					this.SendPropertyChanging();
					this._Time5 = value;
					this.SendPropertyChanged("Time5");
					this.OnTime5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taken5", DbType="Char(1)")]
		public System.Nullable<char> Taken5
		{
			get
			{
				return this._Taken5;
			}
			set
			{
				if ((this._Taken5 != value))
				{
					this.OnTaken5Changing(value);
					this.SendPropertyChanging();
					this._Taken5 = value;
					this.SendPropertyChanged("Taken5");
					this.OnTaken5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time6", DbType="Time")]
		public System.Nullable<System.TimeSpan> Time6
		{
			get
			{
				return this._Time6;
			}
			set
			{
				if ((this._Time6 != value))
				{
					this.OnTime6Changing(value);
					this.SendPropertyChanging();
					this._Time6 = value;
					this.SendPropertyChanged("Time6");
					this.OnTime6Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taken6", DbType="Char(1)")]
		public System.Nullable<char> Taken6
		{
			get
			{
				return this._Taken6;
			}
			set
			{
				if ((this._Taken6 != value))
				{
					this.OnTaken6Changing(value);
					this.SendPropertyChanging();
					this._Taken6 = value;
					this.SendPropertyChanged("Taken6");
					this.OnTaken6Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Prescription", Storage="_Patient", ThisKey="PatientID", OtherKey="PatientID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Prescriptions.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Prescriptions.Add(this);
						this._PatientID = value.PatientID;
					}
					else
					{
						this._PatientID = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
