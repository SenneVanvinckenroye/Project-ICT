//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace MedAgent_0_1.MedCareCloudServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/SilverlightApplication3.Web.Model")]
    public partial class User : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string FNameField;
        
        private string LNameField;
        
        private int MemberIDField;
        
        private char UserTypeField;
        
        private System.DateTime bdayField;
        
        private string emailField;
        
        private string pass_hashField;
        
        private char sexField;
        
        private int ssnField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FName {
            get {
                return this.FNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FNameField, value) != true)) {
                    this.FNameField = value;
                    this.RaisePropertyChanged("FName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LName {
            get {
                return this.LNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LNameField, value) != true)) {
                    this.LNameField = value;
                    this.RaisePropertyChanged("LName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MemberID {
            get {
                return this.MemberIDField;
            }
            set {
                if ((this.MemberIDField.Equals(value) != true)) {
                    this.MemberIDField = value;
                    this.RaisePropertyChanged("MemberID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char UserType {
            get {
                return this.UserTypeField;
            }
            set {
                if ((this.UserTypeField.Equals(value) != true)) {
                    this.UserTypeField = value;
                    this.RaisePropertyChanged("UserType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime bday {
            get {
                return this.bdayField;
            }
            set {
                if ((this.bdayField.Equals(value) != true)) {
                    this.bdayField = value;
                    this.RaisePropertyChanged("bday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string pass_hash {
            get {
                return this.pass_hashField;
            }
            set {
                if ((object.ReferenceEquals(this.pass_hashField, value) != true)) {
                    this.pass_hashField = value;
                    this.RaisePropertyChanged("pass_hash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char sex {
            get {
                return this.sexField;
            }
            set {
                if ((this.sexField.Equals(value) != true)) {
                    this.sexField = value;
                    this.RaisePropertyChanged("sex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ssn {
            get {
                return this.ssnField;
            }
            set {
                if ((this.ssnField.Equals(value) != true)) {
                    this.ssnField = value;
                    this.RaisePropertyChanged("ssn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Patient", Namespace="http://schemas.datacontract.org/2004/07/SilverlightApplication3.Web.Model")]
    public partial class Patient : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int DocIDField;
        
        private string EmailField;
        
        private string FirstNameField;
        
        private string LastNameField;
        
        private int MemberIDField;
        
        private int PatientIDField;
        
        private char SexField;
        
        private int SsnField;
        
        private System.DateTime bDayField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DocID {
            get {
                return this.DocIDField;
            }
            set {
                if ((this.DocIDField.Equals(value) != true)) {
                    this.DocIDField = value;
                    this.RaisePropertyChanged("DocID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MemberID {
            get {
                return this.MemberIDField;
            }
            set {
                if ((this.MemberIDField.Equals(value) != true)) {
                    this.MemberIDField = value;
                    this.RaisePropertyChanged("MemberID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientID {
            get {
                return this.PatientIDField;
            }
            set {
                if ((this.PatientIDField.Equals(value) != true)) {
                    this.PatientIDField = value;
                    this.RaisePropertyChanged("PatientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char Sex {
            get {
                return this.SexField;
            }
            set {
                if ((this.SexField.Equals(value) != true)) {
                    this.SexField = value;
                    this.RaisePropertyChanged("Sex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Ssn {
            get {
                return this.SsnField;
            }
            set {
                if ((this.SsnField.Equals(value) != true)) {
                    this.SsnField = value;
                    this.RaisePropertyChanged("Ssn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime bDay {
            get {
                return this.bDayField;
            }
            set {
                if ((this.bDayField.Equals(value) != true)) {
                    this.bDayField = value;
                    this.RaisePropertyChanged("bDay");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Prescription", Namespace="http://schemas.datacontract.org/2004/07/SilverlightApplication3.Web.Model")]
    public partial class Prescription : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CourseField;
        
        private string DDescriptionField;
        
        private string DrugNameField;
        
        private System.DateTime EndDateField;
        
        private int PatientIDField;
        
        private int PrescriptionIDField;
        
        private int QuantityField;
        
        private System.DateTime StartDateField;
        
        private char Taken1Field;
        
        private char Taken2Field;
        
        private char Taken3Field;
        
        private char Taken4Field;
        
        private char Taken5Field;
        
        private char Taken6Field;
        
        private System.TimeSpan Time1Field;
        
        private System.TimeSpan Time2Field;
        
        private System.TimeSpan Time3Field;
        
        private System.TimeSpan Time4Field;
        
        private System.TimeSpan Time5Field;
        
        private System.TimeSpan Time6Field;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Course {
            get {
                return this.CourseField;
            }
            set {
                if ((object.ReferenceEquals(this.CourseField, value) != true)) {
                    this.CourseField = value;
                    this.RaisePropertyChanged("Course");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DDescription {
            get {
                return this.DDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DDescriptionField, value) != true)) {
                    this.DDescriptionField = value;
                    this.RaisePropertyChanged("DDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DrugName {
            get {
                return this.DrugNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DrugNameField, value) != true)) {
                    this.DrugNameField = value;
                    this.RaisePropertyChanged("DrugName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientID {
            get {
                return this.PatientIDField;
            }
            set {
                if ((this.PatientIDField.Equals(value) != true)) {
                    this.PatientIDField = value;
                    this.RaisePropertyChanged("PatientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrescriptionID {
            get {
                return this.PrescriptionIDField;
            }
            set {
                if ((this.PrescriptionIDField.Equals(value) != true)) {
                    this.PrescriptionIDField = value;
                    this.RaisePropertyChanged("PrescriptionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char Taken1 {
            get {
                return this.Taken1Field;
            }
            set {
                if ((this.Taken1Field.Equals(value) != true)) {
                    this.Taken1Field = value;
                    this.RaisePropertyChanged("Taken1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char Taken2 {
            get {
                return this.Taken2Field;
            }
            set {
                if ((this.Taken2Field.Equals(value) != true)) {
                    this.Taken2Field = value;
                    this.RaisePropertyChanged("Taken2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char Taken3 {
            get {
                return this.Taken3Field;
            }
            set {
                if ((this.Taken3Field.Equals(value) != true)) {
                    this.Taken3Field = value;
                    this.RaisePropertyChanged("Taken3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char Taken4 {
            get {
                return this.Taken4Field;
            }
            set {
                if ((this.Taken4Field.Equals(value) != true)) {
                    this.Taken4Field = value;
                    this.RaisePropertyChanged("Taken4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char Taken5 {
            get {
                return this.Taken5Field;
            }
            set {
                if ((this.Taken5Field.Equals(value) != true)) {
                    this.Taken5Field = value;
                    this.RaisePropertyChanged("Taken5");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char Taken6 {
            get {
                return this.Taken6Field;
            }
            set {
                if ((this.Taken6Field.Equals(value) != true)) {
                    this.Taken6Field = value;
                    this.RaisePropertyChanged("Taken6");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Time1 {
            get {
                return this.Time1Field;
            }
            set {
                if ((this.Time1Field.Equals(value) != true)) {
                    this.Time1Field = value;
                    this.RaisePropertyChanged("Time1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Time2 {
            get {
                return this.Time2Field;
            }
            set {
                if ((this.Time2Field.Equals(value) != true)) {
                    this.Time2Field = value;
                    this.RaisePropertyChanged("Time2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Time3 {
            get {
                return this.Time3Field;
            }
            set {
                if ((this.Time3Field.Equals(value) != true)) {
                    this.Time3Field = value;
                    this.RaisePropertyChanged("Time3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Time4 {
            get {
                return this.Time4Field;
            }
            set {
                if ((this.Time4Field.Equals(value) != true)) {
                    this.Time4Field = value;
                    this.RaisePropertyChanged("Time4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Time5 {
            get {
                return this.Time5Field;
            }
            set {
                if ((this.Time5Field.Equals(value) != true)) {
                    this.Time5Field = value;
                    this.RaisePropertyChanged("Time5");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Time6 {
            get {
                return this.Time6Field;
            }
            set {
                if ((this.Time6Field.Equals(value) != true)) {
                    this.Time6Field = value;
                    this.RaisePropertyChanged("Time6");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MedCareCloudServiceReference.IMedPlanService")]
    public interface IMedPlanService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMedPlanService/DoWork", ReplyAction="http://tempuri.org/IMedPlanService/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMedPlanService/GetAllUsers", ReplyAction="http://tempuri.org/IMedPlanService/GetAllUsersResponse")]
        System.IAsyncResult BeginGetAllUsers(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.User> EndGetAllUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMedPlanService/GetAllPatientsForDoctor", ReplyAction="http://tempuri.org/IMedPlanService/GetAllPatientsForDoctorResponse")]
        System.IAsyncResult BeginGetAllPatientsForDoctor(int DocID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Patient> EndGetAllPatientsForDoctor(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMedPlanService/Login", ReplyAction="http://tempuri.org/IMedPlanService/LoginResponse")]
        System.IAsyncResult BeginLogin(string email, string pswd_hash, System.AsyncCallback callback, object asyncState);
        
        MedAgent_0_1.MedCareCloudServiceReference.User EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMedPlanService/CreateNewUser", ReplyAction="http://tempuri.org/IMedPlanService/CreateNewUserResponse")]
        System.IAsyncResult BeginCreateNewUser(string FName, string LName, string pass_hash, string email, char sex, int docID, char type, System.DateTime bday, string address, int ssn, [System.ServiceModel.MessageParameterAttribute(Name="DocID")] int DocID1, int phoneNumber, System.AsyncCallback callback, object asyncState);
        
        string EndCreateNewUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMedPlanService/SendEmail", ReplyAction="http://tempuri.org/IMedPlanService/SendEmailResponse")]
        System.IAsyncResult BeginSendEmail(string PatientEmail, string PatientFName, string DoctorLName, string PatientPass, System.AsyncCallback callback, object asyncState);
        
        bool EndSendEmail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMedPlanService/CreatePrescription", ReplyAction="http://tempuri.org/IMedPlanService/CreatePrescriptionResponse")]
        System.IAsyncResult BeginCreatePrescription(
                    string DrugName, 
                    System.DateTime StartDarte, 
                    System.DateTime EndDate, 
                    int Quantity, 
                    System.TimeSpan Time1, 
                    System.TimeSpan Time2, 
                    System.TimeSpan Time3, 
                    System.TimeSpan Time4, 
                    System.TimeSpan Time5, 
                    System.TimeSpan Time6, 
                    string Description, 
                    string Course, 
                    int PatientID, 
                    string Type, 
                    char Taken1, 
                    char Taken2, 
                    char Taken3, 
                    char Taken4, 
                    char Taken5, 
                    char Taken6, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        string EndCreatePrescription(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMedPlanService/GetPatientData", ReplyAction="http://tempuri.org/IMedPlanService/GetPatientDataResponse")]
        System.IAsyncResult BeginGetPatientData(int MemberID, System.AsyncCallback callback, object asyncState);
        
        MedAgent_0_1.MedCareCloudServiceReference.Patient EndGetPatientData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMedPlanService/GetPrescriptionsForPatient", ReplyAction="http://tempuri.org/IMedPlanService/GetPrescriptionsForPatientResponse")]
        System.IAsyncResult BeginGetPrescriptionsForPatient(int PatientID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Prescription> EndGetPrescriptionsForPatient(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMedPlanServiceChannel : MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.User> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.User>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllPatientsForDoctorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllPatientsForDoctorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Patient> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Patient>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MedAgent_0_1.MedCareCloudServiceReference.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MedAgent_0_1.MedCareCloudServiceReference.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateNewUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateNewUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreatePrescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreatePrescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPatientDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPatientDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MedAgent_0_1.MedCareCloudServiceReference.Patient Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MedAgent_0_1.MedCareCloudServiceReference.Patient)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPrescriptionsForPatientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPrescriptionsForPatientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Prescription> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Prescription>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MedPlanServiceClient : System.ServiceModel.ClientBase<MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService>, MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllUsersDelegate;
        
        private EndOperationDelegate onEndGetAllUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllPatientsForDoctorDelegate;
        
        private EndOperationDelegate onEndGetAllPatientsForDoctorDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllPatientsForDoctorCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateNewUserDelegate;
        
        private EndOperationDelegate onEndCreateNewUserDelegate;
        
        private System.Threading.SendOrPostCallback onCreateNewUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendEmailDelegate;
        
        private EndOperationDelegate onEndSendEmailDelegate;
        
        private System.Threading.SendOrPostCallback onSendEmailCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreatePrescriptionDelegate;
        
        private EndOperationDelegate onEndCreatePrescriptionDelegate;
        
        private System.Threading.SendOrPostCallback onCreatePrescriptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPatientDataDelegate;
        
        private EndOperationDelegate onEndGetPatientDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetPatientDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPrescriptionsForPatientDelegate;
        
        private EndOperationDelegate onEndGetPrescriptionsForPatientDelegate;
        
        private System.Threading.SendOrPostCallback onGetPrescriptionsForPatientCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MedPlanServiceClient() {
        }
        
        public MedPlanServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MedPlanServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MedPlanServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MedPlanServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<GetAllUsersCompletedEventArgs> GetAllUsersCompleted;
        
        public event System.EventHandler<GetAllPatientsForDoctorCompletedEventArgs> GetAllPatientsForDoctorCompleted;
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<CreateNewUserCompletedEventArgs> CreateNewUserCompleted;
        
        public event System.EventHandler<SendEmailCompletedEventArgs> SendEmailCompleted;
        
        public event System.EventHandler<CreatePrescriptionCompletedEventArgs> CreatePrescriptionCompleted;
        
        public event System.EventHandler<GetPatientDataCompletedEventArgs> GetPatientDataCompleted;
        
        public event System.EventHandler<GetPrescriptionsForPatientCompletedEventArgs> GetPrescriptionsForPatientCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.BeginGetAllUsers(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllUsers(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.User> MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.EndGetAllUsers(System.IAsyncResult result) {
            return base.Channel.EndGetAllUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetAllUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).BeginGetAllUsers(callback, asyncState);
        }
        
        private object[] OnEndGetAllUsers(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.User> retVal = ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).EndGetAllUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllUsersCompleted(object state) {
            if ((this.GetAllUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllUsersCompleted(this, new GetAllUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllUsersAsync() {
            this.GetAllUsersAsync(null);
        }
        
        public void GetAllUsersAsync(object userState) {
            if ((this.onBeginGetAllUsersDelegate == null)) {
                this.onBeginGetAllUsersDelegate = new BeginOperationDelegate(this.OnBeginGetAllUsers);
            }
            if ((this.onEndGetAllUsersDelegate == null)) {
                this.onEndGetAllUsersDelegate = new EndOperationDelegate(this.OnEndGetAllUsers);
            }
            if ((this.onGetAllUsersCompletedDelegate == null)) {
                this.onGetAllUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllUsersDelegate, null, this.onEndGetAllUsersDelegate, this.onGetAllUsersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.BeginGetAllPatientsForDoctor(int DocID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllPatientsForDoctor(DocID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Patient> MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.EndGetAllPatientsForDoctor(System.IAsyncResult result) {
            return base.Channel.EndGetAllPatientsForDoctor(result);
        }
        
        private System.IAsyncResult OnBeginGetAllPatientsForDoctor(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int DocID = ((int)(inValues[0]));
            return ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).BeginGetAllPatientsForDoctor(DocID, callback, asyncState);
        }
        
        private object[] OnEndGetAllPatientsForDoctor(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Patient> retVal = ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).EndGetAllPatientsForDoctor(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllPatientsForDoctorCompleted(object state) {
            if ((this.GetAllPatientsForDoctorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllPatientsForDoctorCompleted(this, new GetAllPatientsForDoctorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllPatientsForDoctorAsync(int DocID) {
            this.GetAllPatientsForDoctorAsync(DocID, null);
        }
        
        public void GetAllPatientsForDoctorAsync(int DocID, object userState) {
            if ((this.onBeginGetAllPatientsForDoctorDelegate == null)) {
                this.onBeginGetAllPatientsForDoctorDelegate = new BeginOperationDelegate(this.OnBeginGetAllPatientsForDoctor);
            }
            if ((this.onEndGetAllPatientsForDoctorDelegate == null)) {
                this.onEndGetAllPatientsForDoctorDelegate = new EndOperationDelegate(this.OnEndGetAllPatientsForDoctor);
            }
            if ((this.onGetAllPatientsForDoctorCompletedDelegate == null)) {
                this.onGetAllPatientsForDoctorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllPatientsForDoctorCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllPatientsForDoctorDelegate, new object[] {
                        DocID}, this.onEndGetAllPatientsForDoctorDelegate, this.onGetAllPatientsForDoctorCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.BeginLogin(string email, string pswd_hash, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(email, pswd_hash, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MedAgent_0_1.MedCareCloudServiceReference.User MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            string pswd_hash = ((string)(inValues[1]));
            return ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).BeginLogin(email, pswd_hash, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            MedAgent_0_1.MedCareCloudServiceReference.User retVal = ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string email, string pswd_hash) {
            this.LoginAsync(email, pswd_hash, null);
        }
        
        public void LoginAsync(string email, string pswd_hash, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        email,
                        pswd_hash}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.BeginCreateNewUser(string FName, string LName, string pass_hash, string email, char sex, int docID, char type, System.DateTime bday, string address, int ssn, int DocID1, int phoneNumber, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateNewUser(FName, LName, pass_hash, email, sex, docID, type, bday, address, ssn, DocID1, phoneNumber, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.EndCreateNewUser(System.IAsyncResult result) {
            return base.Channel.EndCreateNewUser(result);
        }
        
        private System.IAsyncResult OnBeginCreateNewUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string FName = ((string)(inValues[0]));
            string LName = ((string)(inValues[1]));
            string pass_hash = ((string)(inValues[2]));
            string email = ((string)(inValues[3]));
            char sex = ((char)(inValues[4]));
            int docID = ((int)(inValues[5]));
            char type = ((char)(inValues[6]));
            System.DateTime bday = ((System.DateTime)(inValues[7]));
            string address = ((string)(inValues[8]));
            int ssn = ((int)(inValues[9]));
            int DocID1 = ((int)(inValues[10]));
            int phoneNumber = ((int)(inValues[11]));
            return ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).BeginCreateNewUser(FName, LName, pass_hash, email, sex, docID, type, bday, address, ssn, DocID1, phoneNumber, callback, asyncState);
        }
        
        private object[] OnEndCreateNewUser(System.IAsyncResult result) {
            string retVal = ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).EndCreateNewUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateNewUserCompleted(object state) {
            if ((this.CreateNewUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateNewUserCompleted(this, new CreateNewUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateNewUserAsync(string FName, string LName, string pass_hash, string email, char sex, int docID, char type, System.DateTime bday, string address, int ssn, int DocID1, int phoneNumber) {
            this.CreateNewUserAsync(FName, LName, pass_hash, email, sex, docID, type, bday, address, ssn, DocID1, phoneNumber, null);
        }
        
        public void CreateNewUserAsync(string FName, string LName, string pass_hash, string email, char sex, int docID, char type, System.DateTime bday, string address, int ssn, int DocID1, int phoneNumber, object userState) {
            if ((this.onBeginCreateNewUserDelegate == null)) {
                this.onBeginCreateNewUserDelegate = new BeginOperationDelegate(this.OnBeginCreateNewUser);
            }
            if ((this.onEndCreateNewUserDelegate == null)) {
                this.onEndCreateNewUserDelegate = new EndOperationDelegate(this.OnEndCreateNewUser);
            }
            if ((this.onCreateNewUserCompletedDelegate == null)) {
                this.onCreateNewUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateNewUserCompleted);
            }
            base.InvokeAsync(this.onBeginCreateNewUserDelegate, new object[] {
                        FName,
                        LName,
                        pass_hash,
                        email,
                        sex,
                        docID,
                        type,
                        bday,
                        address,
                        ssn,
                        DocID1,
                        phoneNumber}, this.onEndCreateNewUserDelegate, this.onCreateNewUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.BeginSendEmail(string PatientEmail, string PatientFName, string DoctorLName, string PatientPass, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendEmail(PatientEmail, PatientFName, DoctorLName, PatientPass, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.EndSendEmail(System.IAsyncResult result) {
            return base.Channel.EndSendEmail(result);
        }
        
        private System.IAsyncResult OnBeginSendEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string PatientEmail = ((string)(inValues[0]));
            string PatientFName = ((string)(inValues[1]));
            string DoctorLName = ((string)(inValues[2]));
            string PatientPass = ((string)(inValues[3]));
            return ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).BeginSendEmail(PatientEmail, PatientFName, DoctorLName, PatientPass, callback, asyncState);
        }
        
        private object[] OnEndSendEmail(System.IAsyncResult result) {
            bool retVal = ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).EndSendEmail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendEmailCompleted(object state) {
            if ((this.SendEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendEmailCompleted(this, new SendEmailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendEmailAsync(string PatientEmail, string PatientFName, string DoctorLName, string PatientPass) {
            this.SendEmailAsync(PatientEmail, PatientFName, DoctorLName, PatientPass, null);
        }
        
        public void SendEmailAsync(string PatientEmail, string PatientFName, string DoctorLName, string PatientPass, object userState) {
            if ((this.onBeginSendEmailDelegate == null)) {
                this.onBeginSendEmailDelegate = new BeginOperationDelegate(this.OnBeginSendEmail);
            }
            if ((this.onEndSendEmailDelegate == null)) {
                this.onEndSendEmailDelegate = new EndOperationDelegate(this.OnEndSendEmail);
            }
            if ((this.onSendEmailCompletedDelegate == null)) {
                this.onSendEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendEmailCompleted);
            }
            base.InvokeAsync(this.onBeginSendEmailDelegate, new object[] {
                        PatientEmail,
                        PatientFName,
                        DoctorLName,
                        PatientPass}, this.onEndSendEmailDelegate, this.onSendEmailCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.BeginCreatePrescription(
                    string DrugName, 
                    System.DateTime StartDarte, 
                    System.DateTime EndDate, 
                    int Quantity, 
                    System.TimeSpan Time1, 
                    System.TimeSpan Time2, 
                    System.TimeSpan Time3, 
                    System.TimeSpan Time4, 
                    System.TimeSpan Time5, 
                    System.TimeSpan Time6, 
                    string Description, 
                    string Course, 
                    int PatientID, 
                    string Type, 
                    char Taken1, 
                    char Taken2, 
                    char Taken3, 
                    char Taken4, 
                    char Taken5, 
                    char Taken6, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginCreatePrescription(DrugName, StartDarte, EndDate, Quantity, Time1, Time2, Time3, Time4, Time5, Time6, Description, Course, PatientID, Type, Taken1, Taken2, Taken3, Taken4, Taken5, Taken6, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.EndCreatePrescription(System.IAsyncResult result) {
            return base.Channel.EndCreatePrescription(result);
        }
        
        private System.IAsyncResult OnBeginCreatePrescription(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string DrugName = ((string)(inValues[0]));
            System.DateTime StartDarte = ((System.DateTime)(inValues[1]));
            System.DateTime EndDate = ((System.DateTime)(inValues[2]));
            int Quantity = ((int)(inValues[3]));
            System.TimeSpan Time1 = ((System.TimeSpan)(inValues[4]));
            System.TimeSpan Time2 = ((System.TimeSpan)(inValues[5]));
            System.TimeSpan Time3 = ((System.TimeSpan)(inValues[6]));
            System.TimeSpan Time4 = ((System.TimeSpan)(inValues[7]));
            System.TimeSpan Time5 = ((System.TimeSpan)(inValues[8]));
            System.TimeSpan Time6 = ((System.TimeSpan)(inValues[9]));
            string Description = ((string)(inValues[10]));
            string Course = ((string)(inValues[11]));
            int PatientID = ((int)(inValues[12]));
            string Type = ((string)(inValues[13]));
            char Taken1 = ((char)(inValues[14]));
            char Taken2 = ((char)(inValues[15]));
            char Taken3 = ((char)(inValues[16]));
            char Taken4 = ((char)(inValues[17]));
            char Taken5 = ((char)(inValues[18]));
            char Taken6 = ((char)(inValues[19]));
            return ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).BeginCreatePrescription(DrugName, StartDarte, EndDate, Quantity, Time1, Time2, Time3, Time4, Time5, Time6, Description, Course, PatientID, Type, Taken1, Taken2, Taken3, Taken4, Taken5, Taken6, callback, asyncState);
        }
        
        private object[] OnEndCreatePrescription(System.IAsyncResult result) {
            string retVal = ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).EndCreatePrescription(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreatePrescriptionCompleted(object state) {
            if ((this.CreatePrescriptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreatePrescriptionCompleted(this, new CreatePrescriptionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreatePrescriptionAsync(
                    string DrugName, 
                    System.DateTime StartDarte, 
                    System.DateTime EndDate, 
                    int Quantity, 
                    System.TimeSpan Time1, 
                    System.TimeSpan Time2, 
                    System.TimeSpan Time3, 
                    System.TimeSpan Time4, 
                    System.TimeSpan Time5, 
                    System.TimeSpan Time6, 
                    string Description, 
                    string Course, 
                    int PatientID, 
                    string Type, 
                    char Taken1, 
                    char Taken2, 
                    char Taken3, 
                    char Taken4, 
                    char Taken5, 
                    char Taken6) {
            this.CreatePrescriptionAsync(DrugName, StartDarte, EndDate, Quantity, Time1, Time2, Time3, Time4, Time5, Time6, Description, Course, PatientID, Type, Taken1, Taken2, Taken3, Taken4, Taken5, Taken6, null);
        }
        
        public void CreatePrescriptionAsync(
                    string DrugName, 
                    System.DateTime StartDarte, 
                    System.DateTime EndDate, 
                    int Quantity, 
                    System.TimeSpan Time1, 
                    System.TimeSpan Time2, 
                    System.TimeSpan Time3, 
                    System.TimeSpan Time4, 
                    System.TimeSpan Time5, 
                    System.TimeSpan Time6, 
                    string Description, 
                    string Course, 
                    int PatientID, 
                    string Type, 
                    char Taken1, 
                    char Taken2, 
                    char Taken3, 
                    char Taken4, 
                    char Taken5, 
                    char Taken6, 
                    object userState) {
            if ((this.onBeginCreatePrescriptionDelegate == null)) {
                this.onBeginCreatePrescriptionDelegate = new BeginOperationDelegate(this.OnBeginCreatePrescription);
            }
            if ((this.onEndCreatePrescriptionDelegate == null)) {
                this.onEndCreatePrescriptionDelegate = new EndOperationDelegate(this.OnEndCreatePrescription);
            }
            if ((this.onCreatePrescriptionCompletedDelegate == null)) {
                this.onCreatePrescriptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreatePrescriptionCompleted);
            }
            base.InvokeAsync(this.onBeginCreatePrescriptionDelegate, new object[] {
                        DrugName,
                        StartDarte,
                        EndDate,
                        Quantity,
                        Time1,
                        Time2,
                        Time3,
                        Time4,
                        Time5,
                        Time6,
                        Description,
                        Course,
                        PatientID,
                        Type,
                        Taken1,
                        Taken2,
                        Taken3,
                        Taken4,
                        Taken5,
                        Taken6}, this.onEndCreatePrescriptionDelegate, this.onCreatePrescriptionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.BeginGetPatientData(int MemberID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPatientData(MemberID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MedAgent_0_1.MedCareCloudServiceReference.Patient MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.EndGetPatientData(System.IAsyncResult result) {
            return base.Channel.EndGetPatientData(result);
        }
        
        private System.IAsyncResult OnBeginGetPatientData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int MemberID = ((int)(inValues[0]));
            return ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).BeginGetPatientData(MemberID, callback, asyncState);
        }
        
        private object[] OnEndGetPatientData(System.IAsyncResult result) {
            MedAgent_0_1.MedCareCloudServiceReference.Patient retVal = ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).EndGetPatientData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPatientDataCompleted(object state) {
            if ((this.GetPatientDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPatientDataCompleted(this, new GetPatientDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPatientDataAsync(int MemberID) {
            this.GetPatientDataAsync(MemberID, null);
        }
        
        public void GetPatientDataAsync(int MemberID, object userState) {
            if ((this.onBeginGetPatientDataDelegate == null)) {
                this.onBeginGetPatientDataDelegate = new BeginOperationDelegate(this.OnBeginGetPatientData);
            }
            if ((this.onEndGetPatientDataDelegate == null)) {
                this.onEndGetPatientDataDelegate = new EndOperationDelegate(this.OnEndGetPatientData);
            }
            if ((this.onGetPatientDataCompletedDelegate == null)) {
                this.onGetPatientDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPatientDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetPatientDataDelegate, new object[] {
                        MemberID}, this.onEndGetPatientDataDelegate, this.onGetPatientDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.BeginGetPrescriptionsForPatient(int PatientID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPrescriptionsForPatient(PatientID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Prescription> MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.EndGetPrescriptionsForPatient(System.IAsyncResult result) {
            return base.Channel.EndGetPrescriptionsForPatient(result);
        }
        
        private System.IAsyncResult OnBeginGetPrescriptionsForPatient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int PatientID = ((int)(inValues[0]));
            return ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).BeginGetPrescriptionsForPatient(PatientID, callback, asyncState);
        }
        
        private object[] OnEndGetPrescriptionsForPatient(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Prescription> retVal = ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).EndGetPrescriptionsForPatient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPrescriptionsForPatientCompleted(object state) {
            if ((this.GetPrescriptionsForPatientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPrescriptionsForPatientCompleted(this, new GetPrescriptionsForPatientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPrescriptionsForPatientAsync(int PatientID) {
            this.GetPrescriptionsForPatientAsync(PatientID, null);
        }
        
        public void GetPrescriptionsForPatientAsync(int PatientID, object userState) {
            if ((this.onBeginGetPrescriptionsForPatientDelegate == null)) {
                this.onBeginGetPrescriptionsForPatientDelegate = new BeginOperationDelegate(this.OnBeginGetPrescriptionsForPatient);
            }
            if ((this.onEndGetPrescriptionsForPatientDelegate == null)) {
                this.onEndGetPrescriptionsForPatientDelegate = new EndOperationDelegate(this.OnEndGetPrescriptionsForPatient);
            }
            if ((this.onGetPrescriptionsForPatientCompletedDelegate == null)) {
                this.onGetPrescriptionsForPatientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPrescriptionsForPatientCompleted);
            }
            base.InvokeAsync(this.onBeginGetPrescriptionsForPatientDelegate, new object[] {
                        PatientID}, this.onEndGetPrescriptionsForPatientDelegate, this.onGetPrescriptionsForPatientCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService CreateChannel() {
            return new MedPlanServiceClientChannel(this);
        }
        
        private class MedPlanServiceClientChannel : ChannelBase<MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService>, MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService {
            
            public MedPlanServiceClientChannel(System.ServiceModel.ClientBase<MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DoWork", _args, result);
            }
            
            public System.IAsyncResult BeginGetAllUsers(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllUsers", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.User> EndGetAllUsers(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.User> _result = ((System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.User>)(base.EndInvoke("GetAllUsers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllPatientsForDoctor(int DocID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = DocID;
                System.IAsyncResult _result = base.BeginInvoke("GetAllPatientsForDoctor", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Patient> EndGetAllPatientsForDoctor(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Patient> _result = ((System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Patient>)(base.EndInvoke("GetAllPatientsForDoctor", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogin(string email, string pswd_hash, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = email;
                _args[1] = pswd_hash;
                System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
                return _result;
            }
            
            public MedAgent_0_1.MedCareCloudServiceReference.User EndLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                MedAgent_0_1.MedCareCloudServiceReference.User _result = ((MedAgent_0_1.MedCareCloudServiceReference.User)(base.EndInvoke("Login", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateNewUser(string FName, string LName, string pass_hash, string email, char sex, int docID, char type, System.DateTime bday, string address, int ssn, int DocID1, int phoneNumber, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[12];
                _args[0] = FName;
                _args[1] = LName;
                _args[2] = pass_hash;
                _args[3] = email;
                _args[4] = sex;
                _args[5] = docID;
                _args[6] = type;
                _args[7] = bday;
                _args[8] = address;
                _args[9] = ssn;
                _args[10] = DocID1;
                _args[11] = phoneNumber;
                System.IAsyncResult _result = base.BeginInvoke("CreateNewUser", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCreateNewUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CreateNewUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendEmail(string PatientEmail, string PatientFName, string DoctorLName, string PatientPass, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = PatientEmail;
                _args[1] = PatientFName;
                _args[2] = DoctorLName;
                _args[3] = PatientPass;
                System.IAsyncResult _result = base.BeginInvoke("SendEmail", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSendEmail(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SendEmail", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreatePrescription(
                        string DrugName, 
                        System.DateTime StartDarte, 
                        System.DateTime EndDate, 
                        int Quantity, 
                        System.TimeSpan Time1, 
                        System.TimeSpan Time2, 
                        System.TimeSpan Time3, 
                        System.TimeSpan Time4, 
                        System.TimeSpan Time5, 
                        System.TimeSpan Time6, 
                        string Description, 
                        string Course, 
                        int PatientID, 
                        string Type, 
                        char Taken1, 
                        char Taken2, 
                        char Taken3, 
                        char Taken4, 
                        char Taken5, 
                        char Taken6, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[20];
                _args[0] = DrugName;
                _args[1] = StartDarte;
                _args[2] = EndDate;
                _args[3] = Quantity;
                _args[4] = Time1;
                _args[5] = Time2;
                _args[6] = Time3;
                _args[7] = Time4;
                _args[8] = Time5;
                _args[9] = Time6;
                _args[10] = Description;
                _args[11] = Course;
                _args[12] = PatientID;
                _args[13] = Type;
                _args[14] = Taken1;
                _args[15] = Taken2;
                _args[16] = Taken3;
                _args[17] = Taken4;
                _args[18] = Taken5;
                _args[19] = Taken6;
                System.IAsyncResult _result = base.BeginInvoke("CreatePrescription", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCreatePrescription(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CreatePrescription", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPatientData(int MemberID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = MemberID;
                System.IAsyncResult _result = base.BeginInvoke("GetPatientData", _args, callback, asyncState);
                return _result;
            }
            
            public MedAgent_0_1.MedCareCloudServiceReference.Patient EndGetPatientData(System.IAsyncResult result) {
                object[] _args = new object[0];
                MedAgent_0_1.MedCareCloudServiceReference.Patient _result = ((MedAgent_0_1.MedCareCloudServiceReference.Patient)(base.EndInvoke("GetPatientData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPrescriptionsForPatient(int PatientID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = PatientID;
                System.IAsyncResult _result = base.BeginInvoke("GetPrescriptionsForPatient", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Prescription> EndGetPrescriptionsForPatient(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Prescription> _result = ((System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Prescription>)(base.EndInvoke("GetPrescriptionsForPatient", _args, result)));
                return _result;
            }
        }
    }
}
