//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace MedAgent_0_1.MedCareCloudServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/SilverlightApplication3.Web.Model")]
    public partial class User : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string FirstNameField;
        
        private string NameField;
        
        private char UserTypeField;
        
        private System.DateTime dateField;
        
        private string emailField;
        
        private int memberIDField;
        
        private string psw_hashField;
        
        private char sexField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char UserType {
            get {
                return this.UserTypeField;
            }
            set {
                if ((this.UserTypeField.Equals(value) != true)) {
                    this.UserTypeField = value;
                    this.RaisePropertyChanged("UserType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime date {
            get {
                return this.dateField;
            }
            set {
                if ((this.dateField.Equals(value) != true)) {
                    this.dateField = value;
                    this.RaisePropertyChanged("date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int memberID {
            get {
                return this.memberIDField;
            }
            set {
                if ((this.memberIDField.Equals(value) != true)) {
                    this.memberIDField = value;
                    this.RaisePropertyChanged("memberID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string psw_hash {
            get {
                return this.psw_hashField;
            }
            set {
                if ((object.ReferenceEquals(this.psw_hashField, value) != true)) {
                    this.psw_hashField = value;
                    this.RaisePropertyChanged("psw_hash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char sex {
            get {
                return this.sexField;
            }
            set {
                if ((this.sexField.Equals(value) != true)) {
                    this.sexField = value;
                    this.RaisePropertyChanged("sex");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Patient", Namespace="http://schemas.datacontract.org/2004/07/SilverlightApplication3.Web.Model")]
    public partial class Patient : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int DocIDField;
        
        private string EmailField;
        
        private string FirstNameField;
        
        private string LastNameField;
        
        private int MemberIDField;
        
        private int PatientIDField;
        
        private char SexField;
        
        private int SsnField;
        
        private System.DateTime bDayField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DocID {
            get {
                return this.DocIDField;
            }
            set {
                if ((this.DocIDField.Equals(value) != true)) {
                    this.DocIDField = value;
                    this.RaisePropertyChanged("DocID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MemberID {
            get {
                return this.MemberIDField;
            }
            set {
                if ((this.MemberIDField.Equals(value) != true)) {
                    this.MemberIDField = value;
                    this.RaisePropertyChanged("MemberID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientID {
            get {
                return this.PatientIDField;
            }
            set {
                if ((this.PatientIDField.Equals(value) != true)) {
                    this.PatientIDField = value;
                    this.RaisePropertyChanged("PatientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char Sex {
            get {
                return this.SexField;
            }
            set {
                if ((this.SexField.Equals(value) != true)) {
                    this.SexField = value;
                    this.RaisePropertyChanged("Sex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Ssn {
            get {
                return this.SsnField;
            }
            set {
                if ((this.SsnField.Equals(value) != true)) {
                    this.SsnField = value;
                    this.RaisePropertyChanged("Ssn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime bDay {
            get {
                return this.bDayField;
            }
            set {
                if ((this.bDayField.Equals(value) != true)) {
                    this.bDayField = value;
                    this.RaisePropertyChanged("bDay");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MedCareCloudServiceReference.IMedPlanService")]
    public interface IMedPlanService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMedPlanService/DoWork", ReplyAction="http://tempuri.org/IMedPlanService/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMedPlanService/GetAllUsers", ReplyAction="http://tempuri.org/IMedPlanService/GetAllUsersResponse")]
        System.IAsyncResult BeginGetAllUsers(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.User> EndGetAllUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMedPlanService/GetAllPatientsForDoctor", ReplyAction="http://tempuri.org/IMedPlanService/GetAllPatientsForDoctorResponse")]
        System.IAsyncResult BeginGetAllPatientsForDoctor(int DocID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Patient> EndGetAllPatientsForDoctor(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMedPlanService/Login", ReplyAction="http://tempuri.org/IMedPlanService/LoginResponse")]
        System.IAsyncResult BeginLogin(string email, string pswd_hash, System.AsyncCallback callback, object asyncState);
        
        MedAgent_0_1.MedCareCloudServiceReference.User EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMedPlanService/SendEmail", ReplyAction="http://tempuri.org/IMedPlanService/SendEmailResponse")]
        System.IAsyncResult BeginSendEmail(string PatientEmail, string PatientFName, string DoctorLName, string PatientPass, System.AsyncCallback callback, object asyncState);
        
        bool EndSendEmail(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMedPlanServiceChannel : MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.User> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.User>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllPatientsForDoctorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllPatientsForDoctorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Patient> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Patient>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MedAgent_0_1.MedCareCloudServiceReference.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MedAgent_0_1.MedCareCloudServiceReference.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MedPlanServiceClient : System.ServiceModel.ClientBase<MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService>, MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllUsersDelegate;
        
        private EndOperationDelegate onEndGetAllUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllPatientsForDoctorDelegate;
        
        private EndOperationDelegate onEndGetAllPatientsForDoctorDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllPatientsForDoctorCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendEmailDelegate;
        
        private EndOperationDelegate onEndSendEmailDelegate;
        
        private System.Threading.SendOrPostCallback onSendEmailCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MedPlanServiceClient() {
        }
        
        public MedPlanServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MedPlanServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MedPlanServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MedPlanServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<GetAllUsersCompletedEventArgs> GetAllUsersCompleted;
        
        public event System.EventHandler<GetAllPatientsForDoctorCompletedEventArgs> GetAllPatientsForDoctorCompleted;
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<SendEmailCompletedEventArgs> SendEmailCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.BeginGetAllUsers(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllUsers(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.User> MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.EndGetAllUsers(System.IAsyncResult result) {
            return base.Channel.EndGetAllUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetAllUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).BeginGetAllUsers(callback, asyncState);
        }
        
        private object[] OnEndGetAllUsers(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.User> retVal = ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).EndGetAllUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllUsersCompleted(object state) {
            if ((this.GetAllUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllUsersCompleted(this, new GetAllUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllUsersAsync() {
            this.GetAllUsersAsync(null);
        }
        
        public void GetAllUsersAsync(object userState) {
            if ((this.onBeginGetAllUsersDelegate == null)) {
                this.onBeginGetAllUsersDelegate = new BeginOperationDelegate(this.OnBeginGetAllUsers);
            }
            if ((this.onEndGetAllUsersDelegate == null)) {
                this.onEndGetAllUsersDelegate = new EndOperationDelegate(this.OnEndGetAllUsers);
            }
            if ((this.onGetAllUsersCompletedDelegate == null)) {
                this.onGetAllUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllUsersDelegate, null, this.onEndGetAllUsersDelegate, this.onGetAllUsersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.BeginGetAllPatientsForDoctor(int DocID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllPatientsForDoctor(DocID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Patient> MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.EndGetAllPatientsForDoctor(System.IAsyncResult result) {
            return base.Channel.EndGetAllPatientsForDoctor(result);
        }
        
        private System.IAsyncResult OnBeginGetAllPatientsForDoctor(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int DocID = ((int)(inValues[0]));
            return ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).BeginGetAllPatientsForDoctor(DocID, callback, asyncState);
        }
        
        private object[] OnEndGetAllPatientsForDoctor(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Patient> retVal = ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).EndGetAllPatientsForDoctor(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllPatientsForDoctorCompleted(object state) {
            if ((this.GetAllPatientsForDoctorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllPatientsForDoctorCompleted(this, new GetAllPatientsForDoctorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllPatientsForDoctorAsync(int DocID) {
            this.GetAllPatientsForDoctorAsync(DocID, null);
        }
        
        public void GetAllPatientsForDoctorAsync(int DocID, object userState) {
            if ((this.onBeginGetAllPatientsForDoctorDelegate == null)) {
                this.onBeginGetAllPatientsForDoctorDelegate = new BeginOperationDelegate(this.OnBeginGetAllPatientsForDoctor);
            }
            if ((this.onEndGetAllPatientsForDoctorDelegate == null)) {
                this.onEndGetAllPatientsForDoctorDelegate = new EndOperationDelegate(this.OnEndGetAllPatientsForDoctor);
            }
            if ((this.onGetAllPatientsForDoctorCompletedDelegate == null)) {
                this.onGetAllPatientsForDoctorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllPatientsForDoctorCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllPatientsForDoctorDelegate, new object[] {
                        DocID}, this.onEndGetAllPatientsForDoctorDelegate, this.onGetAllPatientsForDoctorCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.BeginLogin(string email, string pswd_hash, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(email, pswd_hash, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MedAgent_0_1.MedCareCloudServiceReference.User MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            string pswd_hash = ((string)(inValues[1]));
            return ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).BeginLogin(email, pswd_hash, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            MedAgent_0_1.MedCareCloudServiceReference.User retVal = ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string email, string pswd_hash) {
            this.LoginAsync(email, pswd_hash, null);
        }
        
        public void LoginAsync(string email, string pswd_hash, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        email,
                        pswd_hash}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.BeginSendEmail(string PatientEmail, string PatientFName, string DoctorLName, string PatientPass, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendEmail(PatientEmail, PatientFName, DoctorLName, PatientPass, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService.EndSendEmail(System.IAsyncResult result) {
            return base.Channel.EndSendEmail(result);
        }
        
        private System.IAsyncResult OnBeginSendEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string PatientEmail = ((string)(inValues[0]));
            string PatientFName = ((string)(inValues[1]));
            string DoctorLName = ((string)(inValues[2]));
            string PatientPass = ((string)(inValues[3]));
            return ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).BeginSendEmail(PatientEmail, PatientFName, DoctorLName, PatientPass, callback, asyncState);
        }
        
        private object[] OnEndSendEmail(System.IAsyncResult result) {
            bool retVal = ((MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService)(this)).EndSendEmail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendEmailCompleted(object state) {
            if ((this.SendEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendEmailCompleted(this, new SendEmailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendEmailAsync(string PatientEmail, string PatientFName, string DoctorLName, string PatientPass) {
            this.SendEmailAsync(PatientEmail, PatientFName, DoctorLName, PatientPass, null);
        }
        
        public void SendEmailAsync(string PatientEmail, string PatientFName, string DoctorLName, string PatientPass, object userState) {
            if ((this.onBeginSendEmailDelegate == null)) {
                this.onBeginSendEmailDelegate = new BeginOperationDelegate(this.OnBeginSendEmail);
            }
            if ((this.onEndSendEmailDelegate == null)) {
                this.onEndSendEmailDelegate = new EndOperationDelegate(this.OnEndSendEmail);
            }
            if ((this.onSendEmailCompletedDelegate == null)) {
                this.onSendEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendEmailCompleted);
            }
            base.InvokeAsync(this.onBeginSendEmailDelegate, new object[] {
                        PatientEmail,
                        PatientFName,
                        DoctorLName,
                        PatientPass}, this.onEndSendEmailDelegate, this.onSendEmailCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService CreateChannel() {
            return new MedPlanServiceClientChannel(this);
        }
        
        private class MedPlanServiceClientChannel : ChannelBase<MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService>, MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService {
            
            public MedPlanServiceClientChannel(System.ServiceModel.ClientBase<MedAgent_0_1.MedCareCloudServiceReference.IMedPlanService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DoWork", _args, result);
            }
            
            public System.IAsyncResult BeginGetAllUsers(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllUsers", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.User> EndGetAllUsers(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.User> _result = ((System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.User>)(base.EndInvoke("GetAllUsers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllPatientsForDoctor(int DocID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = DocID;
                System.IAsyncResult _result = base.BeginInvoke("GetAllPatientsForDoctor", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Patient> EndGetAllPatientsForDoctor(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Patient> _result = ((System.Collections.ObjectModel.ObservableCollection<MedAgent_0_1.MedCareCloudServiceReference.Patient>)(base.EndInvoke("GetAllPatientsForDoctor", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogin(string email, string pswd_hash, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = email;
                _args[1] = pswd_hash;
                System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
                return _result;
            }
            
            public MedAgent_0_1.MedCareCloudServiceReference.User EndLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                MedAgent_0_1.MedCareCloudServiceReference.User _result = ((MedAgent_0_1.MedCareCloudServiceReference.User)(base.EndInvoke("Login", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendEmail(string PatientEmail, string PatientFName, string DoctorLName, string PatientPass, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = PatientEmail;
                _args[1] = PatientFName;
                _args[2] = DoctorLName;
                _args[3] = PatientPass;
                System.IAsyncResult _result = base.BeginInvoke("SendEmail", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSendEmail(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SendEmail", _args, result)));
                return _result;
            }
        }
    }
}
